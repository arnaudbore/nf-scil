// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test preproc/topup
nextflow_process {

    name "Test Process PREPROC_TOPUP"
    script "../main.nf"
    process "PREPROC_TOPUP"

    tag "modules"
    tag "modules_nfcore"
    tag "preproc"
    tag "preproc/topup"

    tag "subworflows"
    tag "subworflows/load_test_data"

    config "./nextflow.config"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "topup_eddy.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("topup") {
        when {
            process {


                """
             input[0] = LOAD_DATA.out.test_data_directory
                 .map{ test_data_directory -> [
                 [ id:'test', single_end:false ], // meta map
                 file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-AP_dwi.bval", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-AP_sbref.nii.gz", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-PA_dwi.nii.gz", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-PA_dwi.bval", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-PA_dwi.bvec", checkIfExists: true),
                 file("\${test_data_directory}/sub-01_dir-PA_sbref.nii.gz", checkIfExists: true)
             ]}
             input[1] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }
}
